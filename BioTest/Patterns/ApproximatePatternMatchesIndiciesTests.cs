using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Bioinformatics;
using System.Linq;

namespace BioTest
{
    [TestClass]
    public class ApproximatePatternMatchesIndiciesTests
    {
        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Simple()
        {
            NucleotideDna strand = new NucleotideDna("CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("ATTCTGGA"), 3);

            Assert.AreEqual(4, matches.Count());
            Assert.IsTrue(matches.Contains(6));
            Assert.IsTrue(matches.Contains(7));
            Assert.IsTrue(matches.Contains(26));
            Assert.IsTrue(matches.Contains(27));
        }


        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test1()
        {
            NucleotideDna strand = new NucleotideDna("TTTTTTAAATTTTAAATTTTTT");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("AAA"), 2);

            Assert.AreEqual(10, matches.Count());
            Assert.IsTrue(matches.Contains(4));
            Assert.IsTrue(matches.Contains(5));
            Assert.IsTrue(matches.Contains(6));
            Assert.IsTrue(matches.Contains(7));
            Assert.IsTrue(matches.Contains(8));
            Assert.IsTrue(matches.Contains(11));
            Assert.IsTrue(matches.Contains(12));
            Assert.IsTrue(matches.Contains(13));
            Assert.IsTrue(matches.Contains(14));
            Assert.IsTrue(matches.Contains(15));
        }


        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test2()
        {
            NucleotideDna strand = new NucleotideDna("GAGCGCTGGGTTAACTCGCTACTTCCCGACGAGCGCTGTGGCGCAAATTGGCGATGAAACTGCAGAGAGAACTGGTCATCCAACTGAATTCTCCCCGCTATCGCATTTTGATGCGCGCCGCGTCGATT");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("GAGCGCTGG"), 2);

            Assert.AreEqual(3, matches.Count());
            Assert.IsTrue(matches.Contains(0));
            Assert.IsTrue(matches.Contains(30));
            Assert.IsTrue(matches.Contains(66));
        }


        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test3()
        {
            NucleotideDna strand = new NucleotideDna("CCAAATCCCCTCATGGCATGCATTCCCGCAGTATTTAATCCTTTCATTCTGCATATAAGTAGTGAAGGTATAGAAACCCGTTCAAGCCCGCAGCGGTAAAACCGAGAACCATGATGAATGCACGGCGATTGCGCCATAATCCAAACA");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("AATCCTTTCA"), 3);

            Assert.AreEqual(4, matches.Count());
            Assert.IsTrue(matches.Contains(3));
            Assert.IsTrue(matches.Contains(36));
            Assert.IsTrue(matches.Contains(74));
            Assert.IsTrue(matches.Contains(137));
        }



        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test4()
        {
            NucleotideDna strand = new NucleotideDna("CCGTCATCCGTCATCCTCGCCACGTTGGCATGCATTCCGTCATCCCGTCAGGCATACTTCTGCATATAAGTACAAACATCCGTCATGTCAAAGGGAGCCCGCAGCGGTAAAACCGAGAACCATGATGAATGCACGGCGATTGC");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("CCGTCATCC"), 3);

            Assert.AreEqual(8, matches.Count());
            Assert.IsTrue(matches.Contains(0));
            Assert.IsTrue(matches.Contains(7));
            Assert.IsTrue(matches.Contains(36));
            Assert.IsTrue(matches.Contains(44));
            Assert.IsTrue(matches.Contains(48));
            Assert.IsTrue(matches.Contains(72));
            Assert.IsTrue(matches.Contains(79));
            Assert.IsTrue(matches.Contains(112));
        }


        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test5()
        {
            NucleotideDna strand = new NucleotideDna("AAAAAA");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("TTT"), 3);

            Assert.AreEqual(4, matches.Count());
            Assert.IsTrue(matches.Contains(0));
            Assert.IsTrue(matches.Contains(1));
            Assert.IsTrue(matches.Contains(2));
            Assert.IsTrue(matches.Contains(3));
        }


        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test6()
        {
            NucleotideDna strand = new NucleotideDna("CCACCT");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("CCA"), 0);

            Assert.AreEqual(1, matches.Count());
            Assert.IsTrue(matches.Contains(0));
        }


        [TestMethod]
        public void ApproximatePatternMatchesIndicies_Test7()
        {
            NucleotideDna strand = Load.LoadStrand("datasets//approxPatternMatchesIndicies_dataset.txt");
            var matches = strand.ApproximatePatternMatchesIndicies(new NucleotideDna("GACCACCGAGG"), 6);

            string visual = "";
            foreach (int i in matches)
            {
                visual += i.ToString();
                visual += " ";
            }

            Assert.AreEqual(visual.Trim(), "3 10 13 24 47 57 58 59 71 73 74 77 80 84 87 88 91 104 114 129 134 136 156 160 163 166 167 170 173 186 188 199 216 226 235 236 248 250 287 288 304 323 324 325 334 337 353 354 365 368 374 383 403 406 416 428 435 444 447 448 450 474 477 480 490 493 504 507 517 518 538 539 541 543 545 552 571 574 597 601 604 608 613 615 625 633 662 663 672 687 690 694 703 723 735 736 738 745 748 750 751 754 757 760 763 771 774 781 784 805 814 849 852 856 860 861 863 911 927 930 933 951 967 977 1002 1012 1042 1052 1057 1058 1061 1086 1096 1106 1125 1128 1135 1138 1139 1143 1166 1170 1191 1193 1209 1212 1219 1220 1222 1223 1224 1225 1239 1242 1260 1261 1269 1270 1273 1280 1291 1295 1298 1313 1317 1329 1338 1343 1360 1370 1383 1386 1411 1418 1421 1431 1437 1440 1452 1461 1471 1475 1489 1496 1505 1508 1513 1520 1523 1543 1549 1552 1558 1561 1562 1572 1588 1591 1595 1618 1632 1639 1649 1660 1663 1664 1665 1676 1685 1690 1701 1727 1736 1756 1762 1769 1797 1798 1814 1821 1823 1843 1852 1855 1868 1871 1890 1903 1912 1913 1926 1931 1948 1952 1961 1962 1963 1965 1972 1977 1984 1987 2003 2011 2014 2024 2025 2026 2040 2043 2054 2056 2057 2065 2071 2073 2074 2082 2090 2094 2103 2118 2122 2125 2137 2145 2146 2152 2154 2155 2171 2183 2190 2200 2223 2244 2263 2266 2273 2286 2293 2297 2299 2300 2308 2312 2319 2321 2324 2331 2332 2334 2345 2346 2349 2355 2362 2364 2369 2374 2381 2389 2391 2401 2402 2404 2405 2421 2422 2423 2424 2443 2456 2462 2483 2505 2508 2523 2532 2536 2559 2564 2571 2579 2588 2589 2596 2600 2601 2604 2607 2610 2611 2620 2631 2675 2676 2695 2704 2725 2773 2774 2776 2822 2829 2838 2870 2887 2888 2891 2912 2915 2927 2952 2970 2978 2986 2987 2993 3004 3042 3045 3056 3070 3086 3095 3098 3111 3118 3121 3130 3132 3133 3139 3142 3154 3155 3157 3162 3185 3194 3197 3216 3218 3220 3272 3280 3283 3286 3287 3290 3293 3297 3302 3330 3340 3346 3372 3376 3385 3396 3403 3404 3405 3406 3407 3415 3418 3426 3427 3437 3447 3464 3475 3503 3520 3523 3526 3527 3543 3553 3558 3563 3570 3580 3667 3669 3685 3688 3695 3707 3712 3714 3716 3725 3728 3744 3747 3748 3771 3780 3784 3793 3805 3810 3820 3822 3823 3826 3833 3836 3866 3916 3918 3928 3943 3946 3958 3967 3992 4000 4001 4004 4005 4007 4014 4017 4021 4023 4037 4039 4055 4064 4068 4075 4077 4094 4095 4096 4098 4105 4106 4160 4162 4165 4169 4184 4185 4192 4211 4220 4221 4224 4237 4238 4241 4244 4248 4251 4254 4263 4279 4288 4303 4304 4305 4312 4328 4331 4332 4335 4341 4347 4350 4372 4388 4404 4405 4417 4418 4421 4428 4437 4476 4488 4498 4502 4505 4510 4511 4524 4525 4560 4563 4569 4584 4590 4591 4593 4614 4624 4639 4644 4654 4659 4674 4681 4707 4709 4714 4716 4752 4759 4763 4766 4767 4773 4776 4788 4791 4804 4831 4840 4854 4858 4859 4868 4869 4871 4872 4873 4887 4912 4923 4935 4944 4955 4969 4991 4993 4995 5002 5005 5006 5008 5009 5028 5031 5041 5063 5064 5073 5076 5105 5112 5115 5122 5124 5141 5163 5188 5189 5204 5208 5235 5253 5261 5269 5271 5289 5290 5296 5299 5323 5325 5356 5365 5374 5381 5403 5428 5432 5445 5446 5449 5450 5453 5462 5471 5474 5481 5482 5483 5485 5506 5514 5515 5541 5545 5552 5553 5572 5580 5587 5589 5605 5639 5651 5655 5656 5659 5666 5668 5670 5682 5723 5726 5738 5749 5756 5767 5770 5773 5780 5796 5811 5834 5841 5870 5879 5881 5896 5898 5901 5911 5914 5925 5928 5938 5948 5952 5955 5956 5959 5969 5995 5996 6015 6026 6034 6055 6058 6061 6065 6089 6100 6113 6122 6140 6147 6149 6156 6159 6160 6197 6209 6219 6229 6246 6247 6253 6260 6262 6269 6289 6290 6329 6364 6380 6391 6394 6398 6420 6421 6424 6436 6440 6463 6471 6472 6480 6481 6488 6491 6494 6498 6504 6507 6511 6527 6533 6536 6547 6558 6566 6569 6584 6592 6593 6613 6617 6620 6624 6632 6639 6648 6649 6651 6652 6663 6675 6689 6692 6697 6698 6706 6715 6721 6724 6731 6734 6735 6742 6753 6760 6762 6772 6775 6784 6797 6808 6810 6834 6843 6846 6880 6887 6894 6911 6914 6915 6918 6925 6928 6942 6949 6955 6974 6984 6992 6999 7018 7045 7055 7057 7058 7088 7089 7099 7103 7106 7117 7133 7136 7165 7178 7181 7185 7187 7188 7191 7195 7208 7212 7214 7221 7224 7233 7242 7245 7246 7250 7253 7257 7260 7261 7264 7273 7281 7288 7295 7302 7311 7313 7325 7328 7331 7334 7337 7359 7369 7370 7372 7384 7392 7401 7405 7408 7416 7419 7423 7426 7427 7430 7437 7440 7454 7456 7457 7460 7471 7474 7480 7487 7489 7490 7498 7511 7515 7518 7520 7524 7525 7528 7535 7565 7572 7576 7584 7585 7588 7597 7632 7641 7642 7660 7663 7664 7672 7690 7694 7697 7712 7719 7722 7726 7729 7730 7737 7740 7753 7772 7779 7787 7790 7825 7851 7860 7861 7885 7917 7922 7925 7941 7942 7944 7950 7951 7991 7992 8005 8012 8016 8025 8026 8033 8043 8050 8057 8060 8084 8093 8100 8102 8111 8120 8129 8145 8146 8148 8152 8155 8156 8164 8165 8185 8199 8201 8202 8208 8217 8220 8247 8255 8259 8270 8285 8302 8304 8305 8319 8324 8325 8328 8332 8335 8336 8354 8371 8374 8381 8384 8385 8398 8401 8441 8444 8451 8452 8462 8484 8487 8496 8497 8503 8506 8514 8531 8540 8544 8568 8569 8572 8583 8587 8604 8605 8607 8624 8625 8633 8646 8647 8648 8651 8665 8692 8693 8700 8704 8724 8743 8761 8772 8775 8778 8785 8788 8798 8816 8820 8823 8824 8842 8845 8854 8857 8866 8893 8896 8904 8907 8911 8914 8926 8927 8930 8940 8950 8951 8957 8960 8968 8973 9006 9017 9018 9025 9026 9028 9031 9035 9038 9039 9046 9057 9060 9070 9082 9110 9114 9129 9142 9147 9150 9151 9161 9170 9171 9172 9173 9180 9184 9187 9193 9194 9211 9225 9232 9237 9267 9287 9305 9306 9308 9309 9325 9334 9336 9352 9370 9374 9391 9398 9399 9400 9401 9408 9426 9446 9449 9463 9470 9479 9482 9485 9489 9492 9495 9496 9499 9504 9528 9529 9531 9532 9541 9553 9554 9556 9573 9594 9605 9609 9632 9635 9683 9688 9695 9702 9709 9712 9713 9735 9743 9745 9747 9750 9757 9758 9760 9785 9787 9807 9811 9818 9820 9821 9831 9832 9834 9850 9851 9878 9892 9893 9903 9917 9921 9924 9930 9933 9938 9962 9970 9973 9999 10010 10013 10020 10030 10047 10056 10059 10063 10087 10104 10116 10120 10123 10125 10147 10150 10158 10167 10168 10176 10180 10183 10199 10211 10214 10226 10229 10230 10239 10252 10255 10263 10267 10276 10278 10303 10310 10318 10359 10363 10375 10378 10384 10387 10388 10391 10398 10400 10416 10420 10452 10455 10475 10478 10481 10510 10513 10516 10533 10541 10542 10543 10560 10561 10571 10572 10575 10579 10602 10606 10608 10613 10618 10630 10637 10646 10649 10655 10658 10670 10672 10694 10695 10706 10721 10732 10735 10742 10745 10746 10754 10755 10777 10784 10787 10802 10815 10824 10844 10845 10854 10858 10869 10872 10881 10885 10901 10904 10911 10926 10958 10961 10962 10964 10981 11001 11003 11004 11021 11036 11066 11078 11081 11082 11085 11092 11111 11123 11127 11138 11165 11169 11170 11179 11183 11195 11212 11216 11217 11281 11287 11305 11315 11330 11335 11339 11342 11351 11376 11393 11400 11414 11425 11438 11445 11447 11448 11450 11457 11473 11480 11484 11499 11506 11509 11519 11525 11526 11528 11538 11553 11567 11592 11608 11625 11628 11653 11655 11664 11671 11690 11692 11712 11715 11729 11730 11732 11733 11740 11748 11749 11752 11759 11762 11768 11777 11800 11807 11809 11810 11829 11830 11832 11841 11842 11855 11867 11904 11911 11914 11926 11941 11944 11974 11988 11991 11995 12008 12009 12010 12011 12012 12017 12021 12026 12028 12035 12036 12046 12049 12056 12090 12091 12094 12114 12150 12160 12162 12168 12200 12212 12237 12255 12256 12269 12274 12278 12299 12300 12308 12309 12311 12312 12321 12331 12338 12342 12369 12370 12372 12385 12404 12405 12407 12414 12417 12421 12428 12431 12438 12439 12456 12472 12482 12489 12490 12497 12498 12499 12507 12511 12514 12518 12525 12532 12535 12538 12559 12587 12600 12625 12626 12627 12629 12645 12651 12674 12676 12685 12699 12700 12705 12729 12736 12743 12744 12745 12747 12748 12756 12766 12769 12773 12791 12792 12795 12796 12811 12818 12821 12828 12835 12838 12841 12848 12852 12861 12879 12882 12890 12891 12917 12926 12934 12938 12949 12956 12963 12974 12977 12987 12993 12994 12995 12997 13022 13025 13052 13053 13054 13087 13097 13098 13115 13134 13141 13144 13148 13161 13164 13177 13181 13184 13188 13206 13219 13221 13234 13235 13258 13259 13281 13284 13301 13308 13315 13318 13322 13345 13347 13352 13364 13384 13393 13396 13406 13408 13419 13430 13436 13446 13449 13463 13466 13470 13473 13474 13482 13498 13502 13503 13505 13522 13524 13533 13534 13541 13550 13565 13599 13605 13620 13621 13623 13660 13661 13670 13673 13699 13700 13701 13730 13742 13763 13770 13772 13781 13820 13822 13823 13840 13843 13852 13874 13875 13884 13887 13905 13908 13917 13939 13943 13948 13952 13960 13961 13964 13967 13968 13985 13992 13993 14002 14015 14017 14024 14033 14036 14037 14040 14043 14048 14058 14064 14067 14073 14074 14078 14094 14106 14109 14129 14132 14141 14144 14153 14187 14188 14201 14231 14232 14234 14235 14241 14244 14251 14262 14294 14301 14304 14314 14324 14329 14346 14350 14353 14354 14359 14362 14363 14364 14365 14368 14402 14415 14422 14430 14433 14437 14438 14439 14448 14459 14471 14477 14478 14480 14521 14536 14556 14574 14576 14584 14585 14588 14605 14616 14619 14641 14651 14654 14656 14665 14675 14682 14687 14698 14717 14718 14720 14721 14732 14735 14739 14740 14741 14742 14744 14765 14766 14768 14769 14773 14834 14842 14844 14851 14864 14866 14868 14871 14880 14911 14912 14914 14922 14925 14937 14947 14948 14978 14987 14991 14994 14998 15001 15006 15019 15040 15041 15048 15049 15050 15058 15066 15067 15076 15079 15082 15085 15110 15122 15136 15139 15154 15208 15222 15235 15245 15254 15255 15257 15264 15281 15288 15298 15310 15311 15312 15325 15326 15337 15350 15374 15377 15378 15407 15408 15410 15445 15454 15457 15464 15466 15480 15486 15489 15499 15507 15520 15531 15549 15552 15556 15563 15582 15585 15595 15596 15628 15641 15648 15651 15661 15667 15670 15677 15698 15701 15710 15729 15753 15754 15757 15790 15812 15813 15816 15819 15830 15833 15840 15849 15864 15865 15885 15913 15929 15931 15932 15934 15935 15936 15940 15949 15950 15953 15963 15985 15994 15998 16019 16020 16043 16074 16081 16083 16085 16089 16092 16094 16109 16124 16145 16147 16157 16173 16179 16203 16207 16225 16228 16229 16236 16259 16262 16269 16277 16280 16282 16291 16298 16311 16339 16356 16367 16374 16376 16391 16394 16417 16421 16424 16427 16454 16457 16458 16461 16463 16464 16466 16468 16469 16473 16476 16479 16483 16486 16490 16493 16494 16498 16502 16509 16513 16529 16546 16559 16584 16585 16608"); 
        }

    }
}
